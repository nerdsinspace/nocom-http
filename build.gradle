buildscript {
    ext {
        springBootVersion = '2.1.0.RELEASE'
    }
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("nu.studer:gradle-jooq-plugin:3.0.2")
    }
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'nu.studer.jooq'

group 'com.matt.nocom'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()

    /*flatDir {
        dirs 'libs'
    }*/
}

configurations {
    compile.exclude module: 'spring-boot-starter-logging'
}

ext['jooq.version'] = '3.11.2'

jooq {
    version = '3.11.8'
    edition = 'OSS'
    sqlite(sourceSets.main) {
        jdbc {
            driver = 'org.sqlite.JDBC'
            url = "jdbc:sqlite:${System.properties['user.dir']}/locations.db"
        }
        generator {
            name = 'org.jooq.codegen.DefaultGenerator'
            strategy {
                name = 'org.jooq.codegen.DefaultGeneratorStrategy'
            }
            database {
                //name = 'org.jooq.meta.sqlite.SQLiteDatabase'
                name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
                properties {
                    property {
                        key = 'scripts'
                        value = 'src/main/resources/database.schema.sql'
                    }
                    property {
                        key = 'sort'
                        value = 'semantic'
                    }
                }

                inputSchema = 'PUBLIC'
                outputSchemaToDefault = true
            }
            generate {}
            target {
                packageName = 'com.matt.nocom.server.sqlite'
            }
        }
    }
}

dependencies {
    implementation('org.springframework.boot:spring-boot-starter-web')
    implementation('org.springframework.boot:spring-boot-starter-log4j2')
    implementation('org.springframework.boot:spring-boot-starter-security')
    implementation('org.springframework.boot:spring-boot-starter-thymeleaf')

    compile group: 'org.springframework', name: 'spring-jdbc', version: '5.1.3.RELEASE'
    
    compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect', version: '2.3.0'
    compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity4', version: '3.0.4.RELEASE'
    //compile group: 'org.springframework.security', name: 'spring-security-web', version: '5.1.2.RELEASE'

    // Log4J2
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
    
    // Google commons
    compile group: 'com.google.guava', name: 'guava', version: '25.1-jre'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    
    // Spread sheet building
    compile group: 'org.apache.poi', name: 'poi', version: '3.17'
    compile "org.apache.poi:poi-ooxml:3.17"
    
    // SQLite driver
    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.25.2'
    jooqRuntime group: 'org.xerial', name: 'sqlite-jdbc', version: '3.25.2'
    jooqRuntime group: 'org.jooq', name: 'jooq-meta-extensions'
    
    // jOOQ
    compile group: 'org.jooq', name: 'jooq'
    compile group: 'org.jooq', name: 'jooq-meta'
    compile group: 'org.jooq', name: 'jooq-codegen'

    // minecraft jar
    //compile name: 'minecraft-vanilla'
    compile files("$rootDir/libs/minecraft-vanilla.jar")
    compile group: 'it.unimi.dsi', name: 'fastutil', version: '8.2.2'


    compileOnly('org.projectlombok:lombok')

    testImplementation('org.springframework.boot:spring-boot-starter-test')
    testCompile group: 'junit', name: 'junit', version: '4.12'
}

/*
jar {
    doFirst {
        manifest {
            if (!configurations.compile.isEmpty()) {
                attributes(
                        'Class-Path': configurations.compile.collect{it.toURI().toString()}.join(' '),
                        'Main-Class': 'com.matt.nocom.Main')
            }
        }
    }
}

def writer = new StringWriter()
def xml = new MarkupBuilder(writer)
        .configuration('xmlns': 'http://www.jooq.org/xsd/jooq-codegen-3.11.8.xsd') {
    jdbc() {
        driver('org.sqlite.JDBC')
        url('jdbc:sqlite:./location.db')
        user('')
        password('')
    }
    generator() {
        database() {
        }
        generate() {}
        target() {
            packageName('com.matt.nocom.server.sqlite')
            directory('src/main/java')
        }
    }
}

GenerationTool.generate(JAXB.unmarshal(new StringReader(writer.toString()), org.jooq.meta.jaxb.Configuration.class))
//*/