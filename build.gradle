buildscript {
  ext {
    angularAppDir = "$projectDir/src/main/javascript/frontend"

    sensitive = { ->
      final prop = new Properties();
      prop.load(file("sensitive.properties").newReader());
      return prop;
    }.call()
  }
  repositories {
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
  }
}

plugins {
  id 'java'
  id 'groovy'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version "$springBootVersion"
  id 'nu.studer.jooq' version '4.1'
  id 'com.wiredforcode.spawn' version '0.8.0'
  id 'com.moowork.node' version '1.3.1'
}

group 'com.matt.nocom'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11

repositories {
  mavenCentral()
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
  }
  dependencies {
    dependency group: 'com.auth0', name: 'java-jwt', version: '3.10.2'
    dependency group: 'com.auth0', name: 'auth0-spring-security-api', version: '1.3.0'

    dependency group: 'com.google.guava', name: 'guava', version: '28.2-jre'

    dependency group: 'com.h2database', name: 'h2', version: '1.4.200'
    dependency group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
    dependency group: 'org.flywaydb', name: 'flyway-core', version: '6.3.3'
    dependency group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'

    dependency group: 'org.apache.sshd', name: 'sshd-core', version: '2.4.0'
    dependency group: 'net.i2p.crypto', name: 'eddsa', version: '0.3.0'

    dependency group: 'org.webjars', name: 'webjars-locator', version: '0.30'
    dependency group: 'org.webjars', name: 'jquery', version: '3.4.1'
//    dependency group: 'org.webjars', name: 'popper.js', version: '2.0.2'
    dependency group: 'org.webjars', name: 'bootstrap', version: '4.3.1'
    dependency group: 'org.webjars', name: 'momentjs', version: '2.24.0'
    dependency group: 'org.webjars.bower', name: 'fontawesome', version: '4.7.0'
    dependency group: 'org.webjars.bower', name: 'plotly.js', version: '1.52.2'
    dependency group: 'org.webjars.bower', name: 'sockjs-client', version: '1.4.0'
    dependency group: 'org.webjars.bower', name: 'stomp-websocket', version: '2.3.4'

    dependency group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.2'

    dependency group: 'junit', name: 'junit', version: '4.13'
    dependency group: 'org.spockframework', name: 'spock-core', version: '2.0-M2-groovy-3.0'
  }
}

configurations {
  // we want to use log4j2 instead
  compile.exclude module: 'spring-boot-starter-logging'
}

jooq {
  edition = 'OSS'
  h2(sourceSets.main) {
    jdbc {
      driver = 'org.h2.Driver'
      url = 'jdbc:h2:mem:'
    }
    generator {
      name = 'org.jooq.codegen.DefaultGenerator'
      strategy {
        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
      }
      database {
        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
        properties {
          //noinspection GroovyAssignabilityCheck
          property {
            key = 'scripts'
            value = "src/main/resources/db/h2/*"
          }
          //noinspection GroovyAssignabilityCheck
          property {
            key = 'sort'
            value = 'semantic'
          }
        }
        inputSchema = 'PUBLIC'
        outputSchemaToDefault = true
      }
      generate {}
      target {
        packageName = 'com.matt.nocom.server.h2.codegen'
      }
    }
  }
  nocom(sourceSets.main) {
    jdbc {
      driver = 'org.postgresql.Driver'
      url = ('jdbc:postgresql://'
          + InetSocketAddress.createUnresolved(sensitive['postgres.host'] as String,
          Integer.parseInt(sensitive['postgres.port'] as String))
          + '/'
          + sensitive['postgres.database']
          + '?readOnly=true'
      )
      user = sensitive['postgres.user']
      password = sensitive['postgres.password']
    }
    generator {
      name = 'org.jooq.codegen.DefaultGenerator'
      strategy {
        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
      }
      database {
        name = 'org.jooq.meta.postgres.PostgresDatabase'

        inputSchema = 'public'
        outputSchemaToDefault = true
      }
      generate {}
      target {
        packageName = 'com.matt.nocom.server.postgres.codegen'
      }
    }
  }
}

node {
  version = '12.16.1'
  npmVersion = '6.13.4'
  download = false
  workDir = file("$project.buildDir/node")
  npmWorkDir = workDir;
  nodeModulesDir = file(angularAppDir)
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'

  annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

  compile group: 'nz.net.ultraq.thymeleaf', name: 'thymeleaf-layout-dialect'
  compile group: 'org.thymeleaf.extras', name: 'thymeleaf-extras-springsecurity5'

  compile group: 'javax.xml.bind', name: 'jaxb-api'
  compile group: 'com.auth0', name: 'java-jwt'
  compile group: 'com.auth0', name: 'auth0-spring-security-api'

  compile group: 'com.google.guava', name: 'guava'

  compile group: 'com.h2database', name: 'h2'

  compile group: 'org.postgresql', name: 'postgresql'
  jooqRuntime group: 'org.postgresql', name: 'postgresql'

  compile group: 'org.flywaydb', name: 'flyway-core'
  compile group: 'org.apache.commons', name: 'commons-dbcp2'

  compile group: 'org.jooq', name: 'jooq'
  compile group: 'org.jooq', name: 'jooq-meta'
  compileOnly group: 'org.jooq', name: 'jooq-codegen'
  jooqRuntime group: 'org.jooq', name: 'jooq-meta-extensions'

  compile group: 'org.apache.sshd', name: 'sshd-core'
  compile group: 'net.i2p.crypto', name: 'eddsa'

  compileOnly group: 'org.projectlombok', name: 'lombok'
  annotationProcessor group: 'org.projectlombok', name: 'lombok'

  compile group: 'org.webjars', name: 'webjars-locator'

  compile group: 'org.webjars', name: 'jquery'
  compile group: 'org.webjars', name: 'bootstrap'
  compile group: 'org.webjars', name: 'momentjs'
  compile group: 'org.webjars.bower', name: 'fontawesome'
  compile group: 'org.webjars.bower', name: 'plotly.js'
  compile group: 'org.webjars.bower', name: 'sockjs-client'
  compile group: 'org.webjars.bower', name: 'stomp-websocket'

  testCompile group: 'org.codehaus.groovy', name: 'groovy-all'

  testCompile group: 'junit', name: 'junit'
  testCompile group: 'org.spockframework', name: 'spock-core'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
}

task angularBuild(type: NpmTask, dependsOn: npmInstall) {
  args = ['run', 'build']
}

task angularStart(type: NpmTask, dependsOn: npmInstall) {
  args = ['run', 'start']
}

build {
  dependsOn angularBuild
}

bootRun {
  jvmArgs = ['-Dspring.profiles.active=dev']
}

if (sensitive['ssh.tunnel']) {
  task connectSshTunnel(type: SpawnProcessTask) {
    final port = sensitive['postgres.port']
    final key = sensitive['ssh.key']
    final user = sensitive['ssh.user']
    final sshHost = sensitive['ssh.host']
    final sshPort = sensitive['ssh.port']
    command "ssh -vNL ${port}:127.0.0.1:${port} -i ${key} -p ${sshPort} ${user}@${sshHost}"
    ready 'Authentication succeeded'
  }

  task disconnectSshTunnel(type: KillProcessTask)

  generateNocomJooqSchemaSource.dependsOn connectSshTunnel
  generateNocomJooqSchemaSource.finalizedBy disconnectSshTunnel
}
