buildscript {
  ext {
    sensitive = { ->
      final f = file('sensitive.properties');
      if(!f.exists()) {
        throw new Error('missing sensitive.properties file! fill in sensitive-template.properties and rename it')
      }
      
      final prop = new Properties();
      f.newReader().withCloseable { reader -> prop.load(reader) }
      return prop;
    }.call()

    postgresHostname = sensitive['postgres.host'] as String
    postgresPort = sensitive['postgres.port'].with { port -> Integer.parseInt(port as String) }
  }
  repositories {
    mavenCentral()
    maven { url 'https://plugins.gradle.org/m2/' }
    maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
  }
}

plugins {
  id 'java'
  id 'groovy'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version "$springBootVersion"
  id 'nu.studer.jooq' version '4.1'
}

group 'com.matt.nocom'
version '1.0-SNAPSHOT'

sourceCompatibility = JavaVersion.VERSION_11

repositories {
  mavenCentral()
}

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
  }
  dependencies {
    dependency group: 'org.jooq', name: 'jool', version: '0.9.14'

    dependency group: 'com.auth0', name: 'java-jwt', version: '3.10.2'
    dependency group: 'com.auth0', name: 'auth0-spring-security-api', version: '1.3.0'

    dependency group: 'com.google.guava', name: 'guava', version: '28.2-jre'

    dependency group: 'com.h2database', name: 'h2', version: '1.4.200'
    dependency group: 'org.postgresql', name: 'postgresql', version: '42.2.12'
    dependency group: 'org.flywaydb', name: 'flyway-core', version: '6.3.3'
    dependency group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'

    dependency group: 'org.apache.sshd', name: 'sshd-core', version: '2.4.0'
    dependency group: 'net.i2p.crypto', name: 'eddsa', version: '0.3.0'

    dependency group: 'junit', name: 'junit', version: '4.13'
    dependency group: 'org.codehaus.groovy', name: 'groovy-all', version: '3.0.4'
    dependency group: 'org.spockframework', name: 'spock-core', version: '1.3-groovy-2.5'
  }
}

jooq {
  edition = 'OSS'
  h2(sourceSets.main) {
    jdbc {
      driver = 'org.h2.Driver'
      url = 'jdbc:h2:mem:'
    }
    generator {
      name = 'org.jooq.codegen.DefaultGenerator'
      strategy {
        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
      }
      database {
        name = 'org.jooq.meta.extensions.ddl.DDLDatabase'
        properties {
          //noinspection GroovyAssignabilityCheck
          property {
            key = 'scripts'
            value = "src/main/resources/db/h2/*"
          }
          //noinspection GroovyAssignabilityCheck
          property {
            key = 'sort'
            value = 'semantic'
          }
        }
        inputSchema = 'PUBLIC'
        outputSchemaToDefault = true
      }
      generate {}
      target {
        packageName = 'com.matt.nocom.server.h2.codegen'
      }
    }
  }
  nocom(sourceSets.main) {
    jdbc {
      driver = 'org.postgresql.Driver'
      url = ('jdbc:postgresql://'
          + InetSocketAddress.createUnresolved(postgresHostname, postgresPort)
          + '/'
          + sensitive['postgres.database']
          + '?readOnly=true'
      )
      user = sensitive['postgres.user']
      password = sensitive['postgres.password']
    }
    generator {
      name = 'org.jooq.codegen.DefaultGenerator'
      strategy {
        name = 'org.jooq.codegen.DefaultGeneratorStrategy'
      }
      database {
        name = 'org.jooq.meta.postgres.PostgresDatabase'

        forcedTypes {
          forcedType {
            userType = 'org.jooq.lambda.tuple.Range<Long>'
            binding = 'space.nerdsin.nocom.server.jooq.Int8RangeJOOQBinding'
            includeTypes = 'int8range'
          }
        }

        inputSchema = 'public'
        outputSchemaToDefault = true
      }
      generate {}
      target {
        packageName = 'com.matt.nocom.server.postgres.codegen'
        directory = 'src/main/java'
      }
    }
  }
}

configurations {
  // we want to use log4j2 instead
  compile.exclude module: 'spring-boot-starter-logging'
}

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-log4j2'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-security'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-websocket'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'

  annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

  compile group: 'javax.xml.bind', name: 'jaxb-api'
  compile group: 'com.auth0', name: 'java-jwt'
  compile group: 'com.auth0', name: 'auth0-spring-security-api'

  compile group: 'com.google.guava', name: 'guava'

  compile group: 'com.h2database', name: 'h2'

  compile group: 'org.postgresql', name: 'postgresql'
  jooqRuntime group: 'org.postgresql', name: 'postgresql'

  compile group: 'org.flywaydb', name: 'flyway-core'
  compile group: 'org.apache.commons', name: 'commons-dbcp2'

  compile group: 'org.jooq', name: 'jool'
  compile group: 'org.jooq', name: 'jooq'
  compile group: 'org.jooq', name: 'jooq-meta'
  compileOnly group: 'org.jooq', name: 'jooq-codegen'
  jooqRuntime group: 'org.jooq', name: 'jooq-meta-extensions'

  compile group: 'org.apache.sshd', name: 'sshd-core'
  compile group: 'net.i2p.crypto', name: 'eddsa'

  compileOnly group: 'org.projectlombok', name: 'lombok'
  annotationProcessor group: 'org.projectlombok', name: 'lombok'

  testCompile group: 'org.codehaus.groovy', name: 'groovy-all'

  testCompile group: 'junit', name: 'junit'
  testCompile group: 'org.spockframework', name: 'spock-core'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile group: 'org.codehaus.groovy', name: 'groovy-all'
  testCompile group: 'org.spockframework', name: 'spock-core'
}

bootRun {
  final configs = ['classpath:/application.yml']
  if(file('config.yml').exists()) {
    configs.add 'file:./config.yml'
  }

  jvmArgs = ['-Dspring.profiles.active=dev', "-Dspring.config.location=${configs.join(',')}"]
}

generateNocomJooqSchemaSource.onlyIf {
  try {
    new Socket(postgresHostname, postgresPort).close();
    true
  } catch (Throwable t) {
    println 'Skipping postgres codegen - no database connection detected'
    false
  }
}
