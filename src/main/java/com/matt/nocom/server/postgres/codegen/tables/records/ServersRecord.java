/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables.records;


import com.matt.nocom.server.postgres.codegen.tables.Servers;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServersRecord extends UpdatableRecordImpl<ServersRecord> implements Record2<Short, String> {

    private static final long serialVersionUID = -673113730;

    /**
     * Setter for <code>servers.id</code>.
     */
    public void setId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>servers.id</code>.
     */
    public Short getId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>servers.hostname</code>.
     */
    public void setHostname(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>servers.hostname</code>.
     */
    public String getHostname() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Short, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return Servers.SERVERS.ID;
    }

    @Override
    public Field<String> field2() {
        return Servers.SERVERS.HOSTNAME;
    }

    @Override
    public Short component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getHostname();
    }

    @Override
    public Short value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getHostname();
    }

    @Override
    public ServersRecord value1(Short value) {
        setId(value);
        return this;
    }

    @Override
    public ServersRecord value2(String value) {
        setHostname(value);
        return this;
    }

    @Override
    public ServersRecord values(Short value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ServersRecord
     */
    public ServersRecord() {
        super(Servers.SERVERS);
    }

    /**
     * Create a detached, initialised ServersRecord
     */
    public ServersRecord(Short id, String hostname) {
        super(Servers.SERVERS);

        set(0, id);
        set(1, hostname);
    }
}
