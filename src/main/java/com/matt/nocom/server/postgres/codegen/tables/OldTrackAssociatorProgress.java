/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.tables.records.OldTrackAssociatorProgressRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OldTrackAssociatorProgress extends TableImpl<OldTrackAssociatorProgressRecord> {

    private static final long serialVersionUID = -1636246291;

    /**
     * The reference instance of <code>old_track_associator_progress</code>
     */
    public static final OldTrackAssociatorProgress OLD_TRACK_ASSOCIATOR_PROGRESS = new OldTrackAssociatorProgress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OldTrackAssociatorProgressRecord> getRecordType() {
        return OldTrackAssociatorProgressRecord.class;
    }

    /**
     * The column <code>old_track_associator_progress.max_updated_at_processed</code>.
     */
    public final TableField<OldTrackAssociatorProgressRecord, Long> MAX_UPDATED_AT_PROCESSED = createField(DSL.name("max_updated_at_processed"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>old_track_associator_progress</code> table reference
     */
    public OldTrackAssociatorProgress() {
        this(DSL.name("old_track_associator_progress"), null);
    }

    /**
     * Create an aliased <code>old_track_associator_progress</code> table reference
     */
    public OldTrackAssociatorProgress(String alias) {
        this(DSL.name(alias), OLD_TRACK_ASSOCIATOR_PROGRESS);
    }

    /**
     * Create an aliased <code>old_track_associator_progress</code> table reference
     */
    public OldTrackAssociatorProgress(Name alias) {
        this(alias, OLD_TRACK_ASSOCIATOR_PROGRESS);
    }

    private OldTrackAssociatorProgress(Name alias, Table<OldTrackAssociatorProgressRecord> aliased) {
        this(alias, aliased, null);
    }

    private OldTrackAssociatorProgress(Name alias, Table<OldTrackAssociatorProgressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OldTrackAssociatorProgress(Table<O> child, ForeignKey<O, OldTrackAssociatorProgressRecord> key) {
        super(child, key, OLD_TRACK_ASSOCIATOR_PROGRESS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public OldTrackAssociatorProgress as(String alias) {
        return new OldTrackAssociatorProgress(DSL.name(alias), this);
    }

    @Override
    public OldTrackAssociatorProgress as(Name alias) {
        return new OldTrackAssociatorProgress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OldTrackAssociatorProgress rename(String name) {
        return new OldTrackAssociatorProgress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OldTrackAssociatorProgress rename(Name name) {
        return new OldTrackAssociatorProgress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
