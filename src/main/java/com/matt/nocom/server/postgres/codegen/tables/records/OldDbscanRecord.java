/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables.records;


import com.matt.nocom.server.postgres.codegen.tables.OldDbscan;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OldDbscanRecord extends UpdatableRecordImpl<OldDbscanRecord> implements Record11<Integer, Integer, Integer, Integer, Short, Short, Boolean, Integer, Integer, Integer, Long> {

    private static final long serialVersionUID = 1630848096;

    /**
     * Setter for <code>old_dbscan.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>old_dbscan.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>old_dbscan.cnt</code>.
     */
    public void setCnt(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>old_dbscan.cnt</code>.
     */
    public Integer getCnt() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>old_dbscan.x</code>.
     */
    public void setX(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>old_dbscan.x</code>.
     */
    public Integer getX() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>old_dbscan.z</code>.
     */
    public void setZ(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>old_dbscan.z</code>.
     */
    public Integer getZ() {
        return (Integer) get(3);
    }

    /**
     * Setter for <code>old_dbscan.dimension</code>.
     */
    public void setDimension(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>old_dbscan.dimension</code>.
     */
    public Short getDimension() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>old_dbscan.server_id</code>.
     */
    public void setServerId(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>old_dbscan.server_id</code>.
     */
    public Short getServerId() {
        return (Short) get(5);
    }

    /**
     * Setter for <code>old_dbscan.is_core</code>.
     */
    public void setIsCore(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>old_dbscan.is_core</code>.
     */
    public Boolean getIsCore() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>old_dbscan.cluster_parent</code>.
     */
    public void setClusterParent(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>old_dbscan.cluster_parent</code>.
     */
    public Integer getClusterParent() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>old_dbscan.disjoint_rank</code>.
     */
    public void setDisjointRank(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>old_dbscan.disjoint_rank</code>.
     */
    public Integer getDisjointRank() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>old_dbscan.disjoint_size</code>.
     */
    public void setDisjointSize(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>old_dbscan.disjoint_size</code>.
     */
    public Integer getDisjointSize() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>old_dbscan.updated_at_approx</code>.
     */
    public void setUpdatedAtApprox(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>old_dbscan.updated_at_approx</code>.
     */
    public Long getUpdatedAtApprox() {
        return (Long) get(10);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record11 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, Integer, Integer, Integer, Short, Short, Boolean, Integer, Integer, Integer, Long> fieldsRow() {
        return (Row11) super.fieldsRow();
    }

    @Override
    public Row11<Integer, Integer, Integer, Integer, Short, Short, Boolean, Integer, Integer, Integer, Long> valuesRow() {
        return (Row11) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return OldDbscan.OLD_DBSCAN.ID;
    }

    @Override
    public Field<Integer> field2() {
        return OldDbscan.OLD_DBSCAN.CNT;
    }

    @Override
    public Field<Integer> field3() {
        return OldDbscan.OLD_DBSCAN.X;
    }

    @Override
    public Field<Integer> field4() {
        return OldDbscan.OLD_DBSCAN.Z;
    }

    @Override
    public Field<Short> field5() {
        return OldDbscan.OLD_DBSCAN.DIMENSION;
    }

    @Override
    public Field<Short> field6() {
        return OldDbscan.OLD_DBSCAN.SERVER_ID;
    }

    @Override
    public Field<Boolean> field7() {
        return OldDbscan.OLD_DBSCAN.IS_CORE;
    }

    @Override
    public Field<Integer> field8() {
        return OldDbscan.OLD_DBSCAN.CLUSTER_PARENT;
    }

    @Override
    public Field<Integer> field9() {
        return OldDbscan.OLD_DBSCAN.DISJOINT_RANK;
    }

    @Override
    public Field<Integer> field10() {
        return OldDbscan.OLD_DBSCAN.DISJOINT_SIZE;
    }

    @Override
    public Field<Long> field11() {
        return OldDbscan.OLD_DBSCAN.UPDATED_AT_APPROX;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getCnt();
    }

    @Override
    public Integer component3() {
        return getX();
    }

    @Override
    public Integer component4() {
        return getZ();
    }

    @Override
    public Short component5() {
        return getDimension();
    }

    @Override
    public Short component6() {
        return getServerId();
    }

    @Override
    public Boolean component7() {
        return getIsCore();
    }

    @Override
    public Integer component8() {
        return getClusterParent();
    }

    @Override
    public Integer component9() {
        return getDisjointRank();
    }

    @Override
    public Integer component10() {
        return getDisjointSize();
    }

    @Override
    public Long component11() {
        return getUpdatedAtApprox();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getCnt();
    }

    @Override
    public Integer value3() {
        return getX();
    }

    @Override
    public Integer value4() {
        return getZ();
    }

    @Override
    public Short value5() {
        return getDimension();
    }

    @Override
    public Short value6() {
        return getServerId();
    }

    @Override
    public Boolean value7() {
        return getIsCore();
    }

    @Override
    public Integer value8() {
        return getClusterParent();
    }

    @Override
    public Integer value9() {
        return getDisjointRank();
    }

    @Override
    public Integer value10() {
        return getDisjointSize();
    }

    @Override
    public Long value11() {
        return getUpdatedAtApprox();
    }

    @Override
    public OldDbscanRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public OldDbscanRecord value2(Integer value) {
        setCnt(value);
        return this;
    }

    @Override
    public OldDbscanRecord value3(Integer value) {
        setX(value);
        return this;
    }

    @Override
    public OldDbscanRecord value4(Integer value) {
        setZ(value);
        return this;
    }

    @Override
    public OldDbscanRecord value5(Short value) {
        setDimension(value);
        return this;
    }

    @Override
    public OldDbscanRecord value6(Short value) {
        setServerId(value);
        return this;
    }

    @Override
    public OldDbscanRecord value7(Boolean value) {
        setIsCore(value);
        return this;
    }

    @Override
    public OldDbscanRecord value8(Integer value) {
        setClusterParent(value);
        return this;
    }

    @Override
    public OldDbscanRecord value9(Integer value) {
        setDisjointRank(value);
        return this;
    }

    @Override
    public OldDbscanRecord value10(Integer value) {
        setDisjointSize(value);
        return this;
    }

    @Override
    public OldDbscanRecord value11(Long value) {
        setUpdatedAtApprox(value);
        return this;
    }

    @Override
    public OldDbscanRecord values(Integer value1, Integer value2, Integer value3, Integer value4, Short value5, Short value6, Boolean value7, Integer value8, Integer value9, Integer value10, Long value11) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached OldDbscanRecord
     */
    public OldDbscanRecord() {
        super(OldDbscan.OLD_DBSCAN);
    }

    /**
     * Create a detached, initialised OldDbscanRecord
     */
    public OldDbscanRecord(Integer id, Integer cnt, Integer x, Integer z, Short dimension, Short serverId, Boolean isCore, Integer clusterParent, Integer disjointRank, Integer disjointSize, Long updatedAtApprox) {
        super(OldDbscan.OLD_DBSCAN);

        set(0, id);
        set(1, cnt);
        set(2, x);
        set(3, z);
        set(4, dimension);
        set(5, serverId);
        set(6, isCore);
        set(7, clusterParent);
        set(8, disjointRank);
        set(9, disjointSize);
        set(10, updatedAtApprox);
    }
}
