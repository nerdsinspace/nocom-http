/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.tables.records.GeographyColumnsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeographyColumns extends TableImpl<GeographyColumnsRecord> {

    private static final long serialVersionUID = 2074940678;

    /**
     * The reference instance of <code>geography_columns</code>
     */
    public static final GeographyColumns GEOGRAPHY_COLUMNS = new GeographyColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeographyColumnsRecord> getRecordType() {
        return GeographyColumnsRecord.class;
    }

    /**
     * The column <code>geography_columns.f_table_catalog</code>.
     */
    public final TableField<GeographyColumnsRecord, String> F_TABLE_CATALOG = createField(DSL.name("f_table_catalog"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geography_columns.f_table_schema</code>.
     */
    public final TableField<GeographyColumnsRecord, String> F_TABLE_SCHEMA = createField(DSL.name("f_table_schema"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geography_columns.f_table_name</code>.
     */
    public final TableField<GeographyColumnsRecord, String> F_TABLE_NAME = createField(DSL.name("f_table_name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geography_columns.f_geography_column</code>.
     */
    public final TableField<GeographyColumnsRecord, String> F_GEOGRAPHY_COLUMN = createField(DSL.name("f_geography_column"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geography_columns.coord_dimension</code>.
     */
    public final TableField<GeographyColumnsRecord, Integer> COORD_DIMENSION = createField(DSL.name("coord_dimension"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geography_columns.srid</code>.
     */
    public final TableField<GeographyColumnsRecord, Integer> SRID = createField(DSL.name("srid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geography_columns.type</code>.
     */
    public final TableField<GeographyColumnsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>geography_columns</code> table reference
     */
    public GeographyColumns() {
        this(DSL.name("geography_columns"), null);
    }

    /**
     * Create an aliased <code>geography_columns</code> table reference
     */
    public GeographyColumns(String alias) {
        this(DSL.name(alias), GEOGRAPHY_COLUMNS);
    }

    /**
     * Create an aliased <code>geography_columns</code> table reference
     */
    public GeographyColumns(Name alias) {
        this(alias, GEOGRAPHY_COLUMNS);
    }

    private GeographyColumns(Name alias, Table<GeographyColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private GeographyColumns(Name alias, Table<GeographyColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"geography_columns\" as  SELECT current_database() AS f_table_catalog,\n    n.nspname AS f_table_schema,\n    c.relname AS f_table_name,\n    a.attname AS f_geography_column,\n    postgis_typmod_dims(a.atttypmod) AS coord_dimension,\n    postgis_typmod_srid(a.atttypmod) AS srid,\n    postgis_typmod_type(a.atttypmod) AS type\n   FROM pg_class c,\n    pg_attribute a,\n    pg_type t,\n    pg_namespace n\n  WHERE ((t.typname = 'geography'::name) AND (a.attisdropped = false) AND (a.atttypid = t.oid) AND (a.attrelid = c.oid) AND (c.relnamespace = n.oid) AND (c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'm'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));"));
    }

    public <O extends Record> GeographyColumns(Table<O> child, ForeignKey<O, GeographyColumnsRecord> key) {
        super(child, key, GEOGRAPHY_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public GeographyColumns as(String alias) {
        return new GeographyColumns(DSL.name(alias), this);
    }

    @Override
    public GeographyColumns as(Name alias) {
        return new GeographyColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GeographyColumns rename(String name) {
        return new GeographyColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GeographyColumns rename(Name name) {
        return new GeographyColumns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, Integer, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
