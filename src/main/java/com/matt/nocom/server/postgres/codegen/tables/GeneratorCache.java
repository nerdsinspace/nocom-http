/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.Indexes;
import com.matt.nocom.server.postgres.codegen.Keys;
import com.matt.nocom.server.postgres.codegen.tables.records.GeneratorCacheRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeneratorCache extends TableImpl<GeneratorCacheRecord> {

    private static final long serialVersionUID = 2005775071;

    /**
     * The reference instance of <code>generator_cache</code>
     */
    public static final GeneratorCache GENERATOR_CACHE = new GeneratorCache();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeneratorCacheRecord> getRecordType() {
        return GeneratorCacheRecord.class;
    }

    /**
     * The column <code>generator_cache.data</code>.
     */
    public final TableField<GeneratorCacheRecord, byte[]> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>generator_cache.x</code>.
     */
    public final TableField<GeneratorCacheRecord, Integer> X = createField(DSL.name("x"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>generator_cache.z</code>.
     */
    public final TableField<GeneratorCacheRecord, Integer> Z = createField(DSL.name("z"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>generator_cache.dimension</code>.
     */
    public final TableField<GeneratorCacheRecord, Short> DIMENSION = createField(DSL.name("dimension"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>generator_cache.server_id</code>.
     */
    public final TableField<GeneratorCacheRecord, Short> SERVER_ID = createField(DSL.name("server_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>generator_cache</code> table reference
     */
    public GeneratorCache() {
        this(DSL.name("generator_cache"), null);
    }

    /**
     * Create an aliased <code>generator_cache</code> table reference
     */
    public GeneratorCache(String alias) {
        this(DSL.name(alias), GENERATOR_CACHE);
    }

    /**
     * Create an aliased <code>generator_cache</code> table reference
     */
    public GeneratorCache(Name alias) {
        this(alias, GENERATOR_CACHE);
    }

    private GeneratorCache(Name alias, Table<GeneratorCacheRecord> aliased) {
        this(alias, aliased, null);
    }

    private GeneratorCache(Name alias, Table<GeneratorCacheRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> GeneratorCache(Table<O> child, ForeignKey<O, GeneratorCacheRecord> key) {
        super(child, key, GENERATOR_CACHE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GENERATOR_CACHE_BY_LOC);
    }

    @Override
    public List<ForeignKey<GeneratorCacheRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GeneratorCacheRecord, ?>>asList(Keys.GENERATOR_CACHE__GENERATOR_CACHE_DIMENSION_FKEY, Keys.GENERATOR_CACHE__GENERATOR_CACHE_SERVER_ID_FKEY);
    }

    public Dimensions dimensions() {
        return new Dimensions(this, Keys.GENERATOR_CACHE__GENERATOR_CACHE_DIMENSION_FKEY);
    }

    public Servers servers() {
        return new Servers(this, Keys.GENERATOR_CACHE__GENERATOR_CACHE_SERVER_ID_FKEY);
    }

    @Override
    public GeneratorCache as(String alias) {
        return new GeneratorCache(DSL.name(alias), this);
    }

    @Override
    public GeneratorCache as(Name alias) {
        return new GeneratorCache(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GeneratorCache rename(String name) {
        return new GeneratorCache(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GeneratorCache rename(Name name) {
        return new GeneratorCache(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<byte[], Integer, Integer, Short, Short> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
