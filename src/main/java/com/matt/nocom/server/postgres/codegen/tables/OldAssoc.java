/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.tables.records.OldAssocRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OldAssoc extends TableImpl<OldAssocRecord> {

    private static final long serialVersionUID = -1030161375;

    /**
     * The reference instance of <code>old_assoc</code>
     */
    public static final OldAssoc OLD_ASSOC = new OldAssoc();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OldAssocRecord> getRecordType() {
        return OldAssocRecord.class;
    }

    /**
     * The column <code>old_assoc.username</code>.
     */
    public final TableField<OldAssocRecord, String> USERNAME = createField(DSL.name("username"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>old_assoc.cluster_id</code>.
     */
    public final TableField<OldAssocRecord, Integer> CLUSTER_ID = createField(DSL.name("cluster_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>old_assoc.association</code>.
     */
    public final TableField<OldAssocRecord, Double> ASSOCIATION = createField(DSL.name("association"), org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * Create a <code>old_assoc</code> table reference
     */
    public OldAssoc() {
        this(DSL.name("old_assoc"), null);
    }

    /**
     * Create an aliased <code>old_assoc</code> table reference
     */
    public OldAssoc(String alias) {
        this(DSL.name(alias), OLD_ASSOC);
    }

    /**
     * Create an aliased <code>old_assoc</code> table reference
     */
    public OldAssoc(Name alias) {
        this(alias, OLD_ASSOC);
    }

    private OldAssoc(Name alias, Table<OldAssocRecord> aliased) {
        this(alias, aliased, null);
    }

    private OldAssoc(Name alias, Table<OldAssocRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"old_assoc\" as  SELECT players.username,\n    tmp.cluster_id,\n    tmp.association\n   FROM (( SELECT old_associations.cluster_id,\n            old_associations.player_id,\n            sum(old_associations.association) AS association\n           FROM old_associations\n          GROUP BY old_associations.player_id, old_associations.cluster_id) tmp\n     JOIN players ON ((players.id = tmp.player_id)));"));
    }

    public <O extends Record> OldAssoc(Table<O> child, ForeignKey<O, OldAssocRecord> key) {
        super(child, key, OLD_ASSOC);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public OldAssoc as(String alias) {
        return new OldAssoc(DSL.name(alias), this);
    }

    @Override
    public OldAssoc as(Name alias) {
        return new OldAssoc(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OldAssoc rename(String name) {
        return new OldAssoc(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OldAssoc rename(Name name) {
        return new OldAssoc(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, Double> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
