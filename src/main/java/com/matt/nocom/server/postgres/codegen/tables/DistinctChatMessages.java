/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.tables.records.DistinctChatMessagesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DistinctChatMessages extends TableImpl<DistinctChatMessagesRecord> {

    private static final long serialVersionUID = 1555410196;

    /**
     * The reference instance of <code>distinct_chat_messages</code>
     */
    public static final DistinctChatMessages DISTINCT_CHAT_MESSAGES = new DistinctChatMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DistinctChatMessagesRecord> getRecordType() {
        return DistinctChatMessagesRecord.class;
    }

    /**
     * The column <code>distinct_chat_messages.txt</code>.
     */
    public final TableField<DistinctChatMessagesRecord, String> TXT = createField(DSL.name("txt"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>distinct_chat_messages</code> table reference
     */
    public DistinctChatMessages() {
        this(DSL.name("distinct_chat_messages"), null);
    }

    /**
     * Create an aliased <code>distinct_chat_messages</code> table reference
     */
    public DistinctChatMessages(String alias) {
        this(DSL.name(alias), DISTINCT_CHAT_MESSAGES);
    }

    /**
     * Create an aliased <code>distinct_chat_messages</code> table reference
     */
    public DistinctChatMessages(Name alias) {
        this(alias, DISTINCT_CHAT_MESSAGES);
    }

    private DistinctChatMessages(Name alias, Table<DistinctChatMessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private DistinctChatMessages(Name alias, Table<DistinctChatMessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> DistinctChatMessages(Table<O> child, ForeignKey<O, DistinctChatMessagesRecord> key) {
        super(child, key, DISTINCT_CHAT_MESSAGES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public DistinctChatMessages as(String alias) {
        return new DistinctChatMessages(DSL.name(alias), this);
    }

    @Override
    public DistinctChatMessages as(Name alias) {
        return new DistinctChatMessages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DistinctChatMessages rename(String name) {
        return new DistinctChatMessages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DistinctChatMessages rename(Name name) {
        return new DistinctChatMessages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<String> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
