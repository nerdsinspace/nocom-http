/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.Keys;
import com.matt.nocom.server.postgres.codegen.tables.records.OldDbscanToUpdateRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OldDbscanToUpdate extends TableImpl<OldDbscanToUpdateRecord> {

    private static final long serialVersionUID = -1695357384;

    /**
     * The reference instance of <code>old_dbscan_to_update</code>
     */
    public static final OldDbscanToUpdate OLD_DBSCAN_TO_UPDATE = new OldDbscanToUpdate();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OldDbscanToUpdateRecord> getRecordType() {
        return OldDbscanToUpdateRecord.class;
    }

    /**
     * The column <code>old_dbscan_to_update.dbscan_id</code>.
     */
    public final TableField<OldDbscanToUpdateRecord, Integer> DBSCAN_ID = createField(DSL.name("dbscan_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>old_dbscan_to_update</code> table reference
     */
    public OldDbscanToUpdate() {
        this(DSL.name("old_dbscan_to_update"), null);
    }

    /**
     * Create an aliased <code>old_dbscan_to_update</code> table reference
     */
    public OldDbscanToUpdate(String alias) {
        this(DSL.name(alias), OLD_DBSCAN_TO_UPDATE);
    }

    /**
     * Create an aliased <code>old_dbscan_to_update</code> table reference
     */
    public OldDbscanToUpdate(Name alias) {
        this(alias, OLD_DBSCAN_TO_UPDATE);
    }

    private OldDbscanToUpdate(Name alias, Table<OldDbscanToUpdateRecord> aliased) {
        this(alias, aliased, null);
    }

    private OldDbscanToUpdate(Name alias, Table<OldDbscanToUpdateRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OldDbscanToUpdate(Table<O> child, ForeignKey<O, OldDbscanToUpdateRecord> key) {
        super(child, key, OLD_DBSCAN_TO_UPDATE);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<OldDbscanToUpdateRecord> getPrimaryKey() {
        return Keys.OLD_DBSCAN_TO_UPDATE_PKEY;
    }

    @Override
    public List<UniqueKey<OldDbscanToUpdateRecord>> getKeys() {
        return Arrays.<UniqueKey<OldDbscanToUpdateRecord>>asList(Keys.OLD_DBSCAN_TO_UPDATE_PKEY);
    }

    @Override
    public List<ForeignKey<OldDbscanToUpdateRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OldDbscanToUpdateRecord, ?>>asList(Keys.OLD_DBSCAN_TO_UPDATE__DBSCAN_TO_UPDATE_DBSCAN_ID_FKEY);
    }

    public OldDbscan oldDbscan() {
        return new OldDbscan(this, Keys.OLD_DBSCAN_TO_UPDATE__DBSCAN_TO_UPDATE_DBSCAN_ID_FKEY);
    }

    @Override
    public OldDbscanToUpdate as(String alias) {
        return new OldDbscanToUpdate(DSL.name(alias), this);
    }

    @Override
    public OldDbscanToUpdate as(Name alias) {
        return new OldDbscanToUpdate(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OldDbscanToUpdate rename(String name) {
        return new OldDbscanToUpdate(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OldDbscanToUpdate rename(Name name) {
        return new OldDbscanToUpdate(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
