/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables.records;


import com.matt.nocom.server.postgres.codegen.tables.Dimensions;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DimensionsRecord extends UpdatableRecordImpl<DimensionsRecord> implements Record2<Short, String> {

    private static final long serialVersionUID = -145902438;

    /**
     * Setter for <code>dimensions.ordinal</code>.
     */
    public void setOrdinal(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>dimensions.ordinal</code>.
     */
    public Short getOrdinal() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>dimensions.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>dimensions.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Short, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return Dimensions.DIMENSIONS.ORDINAL;
    }

    @Override
    public Field<String> field2() {
        return Dimensions.DIMENSIONS.NAME;
    }

    @Override
    public Short component1() {
        return getOrdinal();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public Short value1() {
        return getOrdinal();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public DimensionsRecord value1(Short value) {
        setOrdinal(value);
        return this;
    }

    @Override
    public DimensionsRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public DimensionsRecord values(Short value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DimensionsRecord
     */
    public DimensionsRecord() {
        super(Dimensions.DIMENSIONS);
    }

    /**
     * Create a detached, initialised DimensionsRecord
     */
    public DimensionsRecord(Short ordinal, String name) {
        super(Dimensions.DIMENSIONS);

        set(0, ordinal);
        set(1, name);
    }
}
