/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.Keys;
import com.matt.nocom.server.postgres.codegen.tables.records.NotesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notes extends TableImpl<NotesRecord> {

    private static final long serialVersionUID = -266041510;

    /**
     * The reference instance of <code>notes</code>
     */
    public static final Notes NOTES = new Notes();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotesRecord> getRecordType() {
        return NotesRecord.class;
    }

    /**
     * The column <code>notes.x</code>.
     */
    public final TableField<NotesRecord, Integer> X = createField(DSL.name("x"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>notes.z</code>.
     */
    public final TableField<NotesRecord, Integer> Z = createField(DSL.name("z"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>notes.data</code>.
     */
    public final TableField<NotesRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>notes.created_at</code>.
     */
    public final TableField<NotesRecord, Long> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>notes.updated_at</code>.
     */
    public final TableField<NotesRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>notes.dimension</code>.
     */
    public final TableField<NotesRecord, Short> DIMENSION = createField(DSL.name("dimension"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>notes.server_id</code>.
     */
    public final TableField<NotesRecord, Short> SERVER_ID = createField(DSL.name("server_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>notes</code> table reference
     */
    public Notes() {
        this(DSL.name("notes"), null);
    }

    /**
     * Create an aliased <code>notes</code> table reference
     */
    public Notes(String alias) {
        this(DSL.name(alias), NOTES);
    }

    /**
     * Create an aliased <code>notes</code> table reference
     */
    public Notes(Name alias) {
        this(alias, NOTES);
    }

    private Notes(Name alias, Table<NotesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notes(Name alias, Table<NotesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Notes(Table<O> child, ForeignKey<O, NotesRecord> key) {
        super(child, key, NOTES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<UniqueKey<NotesRecord>> getKeys() {
        return Arrays.<UniqueKey<NotesRecord>>asList(Keys.NOTES_SERVER_ID_DIMENSION_X_Z_KEY);
    }

    @Override
    public List<ForeignKey<NotesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotesRecord, ?>>asList(Keys.NOTES__NOTES_DIMENSION_FKEY, Keys.NOTES__NOTES_SERVER_ID_FKEY);
    }

    public Dimensions dimensions() {
        return new Dimensions(this, Keys.NOTES__NOTES_DIMENSION_FKEY);
    }

    public Servers servers() {
        return new Servers(this, Keys.NOTES__NOTES_SERVER_ID_FKEY);
    }

    @Override
    public Notes as(String alias) {
        return new Notes(DSL.name(alias), this);
    }

    @Override
    public Notes as(Name alias) {
        return new Notes(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notes rename(String name) {
        return new Notes(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notes rename(Name name) {
        return new Notes(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Integer, String, Long, Long, Short, Short> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
