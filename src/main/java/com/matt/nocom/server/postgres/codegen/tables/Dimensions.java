/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.Keys;
import com.matt.nocom.server.postgres.codegen.tables.records.DimensionsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dimensions extends TableImpl<DimensionsRecord> {

    private static final long serialVersionUID = -1204672346;

    /**
     * The reference instance of <code>dimensions</code>
     */
    public static final Dimensions DIMENSIONS = new Dimensions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DimensionsRecord> getRecordType() {
        return DimensionsRecord.class;
    }

    /**
     * The column <code>dimensions.ordinal</code>.
     */
    public final TableField<DimensionsRecord, Short> ORDINAL = createField(DSL.name("ordinal"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>dimensions.name</code>.
     */
    public final TableField<DimensionsRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>dimensions</code> table reference
     */
    public Dimensions() {
        this(DSL.name("dimensions"), null);
    }

    /**
     * Create an aliased <code>dimensions</code> table reference
     */
    public Dimensions(String alias) {
        this(DSL.name(alias), DIMENSIONS);
    }

    /**
     * Create an aliased <code>dimensions</code> table reference
     */
    public Dimensions(Name alias) {
        this(alias, DIMENSIONS);
    }

    private Dimensions(Name alias, Table<DimensionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dimensions(Name alias, Table<DimensionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Dimensions(Table<O> child, ForeignKey<O, DimensionsRecord> key) {
        super(child, key, DIMENSIONS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<DimensionsRecord> getPrimaryKey() {
        return Keys.DIMENSIONS_PKEY;
    }

    @Override
    public List<UniqueKey<DimensionsRecord>> getKeys() {
        return Arrays.<UniqueKey<DimensionsRecord>>asList(Keys.DIMENSIONS_PKEY, Keys.DIMENSIONS_NAME_KEY);
    }

    @Override
    public Dimensions as(String alias) {
        return new Dimensions(DSL.name(alias), this);
    }

    @Override
    public Dimensions as(Name alias) {
        return new Dimensions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dimensions rename(String name) {
        return new Dimensions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dimensions rename(Name name) {
        return new Dimensions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
