/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.Keys;
import com.matt.nocom.server.postgres.codegen.tables.records.BlockStatesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BlockStates extends TableImpl<BlockStatesRecord> {

    private static final long serialVersionUID = -1027870994;

    /**
     * The reference instance of <code>block_states</code>
     */
    public static final BlockStates BLOCK_STATES = new BlockStates();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<BlockStatesRecord> getRecordType() {
        return BlockStatesRecord.class;
    }

    /**
     * The column <code>block_states.block_state</code>.
     */
    public final TableField<BlockStatesRecord, Integer> BLOCK_STATE = createField(DSL.name("block_state"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>block_states.name</code>.
     */
    public final TableField<BlockStatesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>block_states</code> table reference
     */
    public BlockStates() {
        this(DSL.name("block_states"), null);
    }

    /**
     * Create an aliased <code>block_states</code> table reference
     */
    public BlockStates(String alias) {
        this(DSL.name(alias), BLOCK_STATES);
    }

    /**
     * Create an aliased <code>block_states</code> table reference
     */
    public BlockStates(Name alias) {
        this(alias, BLOCK_STATES);
    }

    private BlockStates(Name alias, Table<BlockStatesRecord> aliased) {
        this(alias, aliased, null);
    }

    private BlockStates(Name alias, Table<BlockStatesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> BlockStates(Table<O> child, ForeignKey<O, BlockStatesRecord> key) {
        super(child, key, BLOCK_STATES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<BlockStatesRecord> getPrimaryKey() {
        return Keys.BLOCK_STATES_PKEY;
    }

    @Override
    public List<UniqueKey<BlockStatesRecord>> getKeys() {
        return Arrays.<UniqueKey<BlockStatesRecord>>asList(Keys.BLOCK_STATES_PKEY);
    }

    @Override
    public BlockStates as(String alias) {
        return new BlockStates(DSL.name(alias), this);
    }

    @Override
    public BlockStates as(Name alias) {
        return new BlockStates(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockStates rename(String name) {
        return new BlockStates(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public BlockStates rename(Name name) {
        return new BlockStates(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
