/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.Indexes;
import com.matt.nocom.server.postgres.codegen.Keys;
import com.matt.nocom.server.postgres.codegen.tables.records.SignsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Signs extends TableImpl<SignsRecord> {

    private static final long serialVersionUID = -707878984;

    /**
     * The reference instance of <code>signs</code>
     */
    public static final Signs SIGNS = new Signs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SignsRecord> getRecordType() {
        return SignsRecord.class;
    }

    /**
     * The column <code>signs.x</code>.
     */
    public final TableField<SignsRecord, Integer> X = createField(DSL.name("x"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>signs.y</code>.
     */
    public final TableField<SignsRecord, Short> Y = createField(DSL.name("y"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>signs.z</code>.
     */
    public final TableField<SignsRecord, Integer> Z = createField(DSL.name("z"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>signs.nbt</code>.
     */
    public final TableField<SignsRecord, byte[]> NBT = createField(DSL.name("nbt"), org.jooq.impl.SQLDataType.BLOB.nullable(false), this, "");

    /**
     * The column <code>signs.created_at</code>.
     */
    public final TableField<SignsRecord, Long> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>signs.dimension</code>.
     */
    public final TableField<SignsRecord, Short> DIMENSION = createField(DSL.name("dimension"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>signs.server_id</code>.
     */
    public final TableField<SignsRecord, Short> SERVER_ID = createField(DSL.name("server_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * Create a <code>signs</code> table reference
     */
    public Signs() {
        this(DSL.name("signs"), null);
    }

    /**
     * Create an aliased <code>signs</code> table reference
     */
    public Signs(String alias) {
        this(DSL.name(alias), SIGNS);
    }

    /**
     * Create an aliased <code>signs</code> table reference
     */
    public Signs(Name alias) {
        this(alias, SIGNS);
    }

    private Signs(Name alias, Table<SignsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Signs(Name alias, Table<SignsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Signs(Table<O> child, ForeignKey<O, SignsRecord> key) {
        super(child, key, SIGNS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SIGNS_BY_LOC);
    }

    @Override
    public List<ForeignKey<SignsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SignsRecord, ?>>asList(Keys.SIGNS__SIGNS_DIMENSION_FKEY, Keys.SIGNS__SIGNS_SERVER_ID_FKEY);
    }

    public Dimensions dimensions() {
        return new Dimensions(this, Keys.SIGNS__SIGNS_DIMENSION_FKEY);
    }

    public Servers servers() {
        return new Servers(this, Keys.SIGNS__SIGNS_SERVER_ID_FKEY);
    }

    @Override
    public Signs as(String alias) {
        return new Signs(DSL.name(alias), this);
    }

    @Override
    public Signs as(Name alias) {
        return new Signs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Signs rename(String name) {
        return new Signs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Signs rename(Name name) {
        return new Signs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, Short, Integer, byte[], Long, Short, Short> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
