/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables.records;


import com.matt.nocom.server.postgres.codegen.tables.Test;
import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TestRecord extends TableRecordImpl<TestRecord> implements Record2<Integer, Object[]> {

    private static final long serialVersionUID = -2078217190;

    /**
     * Setter for <code>test.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>test.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>test.ts_ranges</code>.
     */
    public void setTsRanges(Object... value) {
        set(1, value);
    }

    /**
     * Getter for <code>test.ts_ranges</code>.
     */
    public Object[] getTsRanges() {
        return (Object[]) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Object[]> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Object[]> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Test.TEST.ID;
    }

    @Override
    public Field<Object[]> field2() {
        return Test.TEST.TS_RANGES;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Object[] component2() {
        return getTsRanges();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Object[] value2() {
        return getTsRanges();
    }

    @Override
    public TestRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TestRecord value2(Object... value) {
        setTsRanges(value);
        return this;
    }

    @Override
    public TestRecord values(Integer value1, Object[] value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TestRecord
     */
    public TestRecord() {
        super(Test.TEST);
    }

    /**
     * Create a detached, initialised TestRecord
     */
    public TestRecord(Integer id, Object[] tsRanges) {
        super(Test.TEST);

        set(0, id);
        set(1, tsRanges);
    }
}
