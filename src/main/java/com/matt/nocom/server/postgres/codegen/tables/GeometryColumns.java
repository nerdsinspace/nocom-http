/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.tables.records.GeometryColumnsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeometryColumns extends TableImpl<GeometryColumnsRecord> {

    private static final long serialVersionUID = -693806012;

    /**
     * The reference instance of <code>geometry_columns</code>
     */
    public static final GeometryColumns GEOMETRY_COLUMNS = new GeometryColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeometryColumnsRecord> getRecordType() {
        return GeometryColumnsRecord.class;
    }

    /**
     * The column <code>geometry_columns.f_table_catalog</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_TABLE_CATALOG = createField(DSL.name("f_table_catalog"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>geometry_columns.f_table_schema</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_TABLE_SCHEMA = createField(DSL.name("f_table_schema"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geometry_columns.f_table_name</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_TABLE_NAME = createField(DSL.name("f_table_name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geometry_columns.f_geometry_column</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_GEOMETRY_COLUMN = createField(DSL.name("f_geometry_column"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geometry_columns.coord_dimension</code>.
     */
    public final TableField<GeometryColumnsRecord, Integer> COORD_DIMENSION = createField(DSL.name("coord_dimension"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geometry_columns.srid</code>.
     */
    public final TableField<GeometryColumnsRecord, Integer> SRID = createField(DSL.name("srid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geometry_columns.type</code>.
     */
    public final TableField<GeometryColumnsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>geometry_columns</code> table reference
     */
    public GeometryColumns() {
        this(DSL.name("geometry_columns"), null);
    }

    /**
     * Create an aliased <code>geometry_columns</code> table reference
     */
    public GeometryColumns(String alias) {
        this(DSL.name(alias), GEOMETRY_COLUMNS);
    }

    /**
     * Create an aliased <code>geometry_columns</code> table reference
     */
    public GeometryColumns(Name alias) {
        this(alias, GEOMETRY_COLUMNS);
    }

    private GeometryColumns(Name alias, Table<GeometryColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private GeometryColumns(Name alias, Table<GeometryColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GeometryColumns(Table<O> child, ForeignKey<O, GeometryColumnsRecord> key) {
        super(child, key, GEOMETRY_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public GeometryColumns as(String alias) {
        return new GeometryColumns(DSL.name(alias), this);
    }

    @Override
    public GeometryColumns as(Name alias) {
        return new GeometryColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GeometryColumns rename(String name) {
        return new GeometryColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GeometryColumns rename(Name name) {
        return new GeometryColumns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, Integer, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
