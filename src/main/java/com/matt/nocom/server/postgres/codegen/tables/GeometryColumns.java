/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.tables.records.GeometryColumnsRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GeometryColumns extends TableImpl<GeometryColumnsRecord> {

    private static final long serialVersionUID = -227212665;

    /**
     * The reference instance of <code>geometry_columns</code>
     */
    public static final GeometryColumns GEOMETRY_COLUMNS = new GeometryColumns();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GeometryColumnsRecord> getRecordType() {
        return GeometryColumnsRecord.class;
    }

    /**
     * The column <code>geometry_columns.f_table_catalog</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_TABLE_CATALOG = createField(DSL.name("f_table_catalog"), org.jooq.impl.SQLDataType.VARCHAR(256), this, "");

    /**
     * The column <code>geometry_columns.f_table_schema</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_TABLE_SCHEMA = createField(DSL.name("f_table_schema"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geometry_columns.f_table_name</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_TABLE_NAME = createField(DSL.name("f_table_name"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geometry_columns.f_geometry_column</code>.
     */
    public final TableField<GeometryColumnsRecord, String> F_GEOMETRY_COLUMN = createField(DSL.name("f_geometry_column"), org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>geometry_columns.coord_dimension</code>.
     */
    public final TableField<GeometryColumnsRecord, Integer> COORD_DIMENSION = createField(DSL.name("coord_dimension"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geometry_columns.srid</code>.
     */
    public final TableField<GeometryColumnsRecord, Integer> SRID = createField(DSL.name("srid"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>geometry_columns.type</code>.
     */
    public final TableField<GeometryColumnsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>geometry_columns</code> table reference
     */
    public GeometryColumns() {
        this(DSL.name("geometry_columns"), null);
    }

    /**
     * Create an aliased <code>geometry_columns</code> table reference
     */
    public GeometryColumns(String alias) {
        this(DSL.name(alias), GEOMETRY_COLUMNS);
    }

    /**
     * Create an aliased <code>geometry_columns</code> table reference
     */
    public GeometryColumns(Name alias) {
        this(alias, GEOMETRY_COLUMNS);
    }

    private GeometryColumns(Name alias, Table<GeometryColumnsRecord> aliased) {
        this(alias, aliased, null);
    }

    private GeometryColumns(Name alias, Table<GeometryColumnsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("create view \"geometry_columns\" as  SELECT (current_database())::character varying(256) AS f_table_catalog,\n    n.nspname AS f_table_schema,\n    c.relname AS f_table_name,\n    a.attname AS f_geometry_column,\n    COALESCE(postgis_typmod_dims(a.atttypmod), sn.ndims, 2) AS coord_dimension,\n    COALESCE(NULLIF(postgis_typmod_srid(a.atttypmod), 0), sr.srid, 0) AS srid,\n    (replace(replace(COALESCE(NULLIF(upper(postgis_typmod_type(a.atttypmod)), 'GEOMETRY'::text), st.type, 'GEOMETRY'::text), 'ZM'::text, ''::text), 'Z'::text, ''::text))::character varying(30) AS type\n   FROM ((((((pg_class c\n     JOIN pg_attribute a ON (((a.attrelid = c.oid) AND (NOT a.attisdropped))))\n     JOIN pg_namespace n ON ((c.relnamespace = n.oid)))\n     JOIN pg_type t ON ((a.atttypid = t.oid)))\n     LEFT JOIN ( SELECT s.connamespace,\n            s.conrelid,\n            s.conkey,\n            replace(split_part(s.consrc, ''''::text, 2), ')'::text, ''::text) AS type\n           FROM ( SELECT pg_constraint.connamespace,\n                    pg_constraint.conrelid,\n                    pg_constraint.conkey,\n                    pg_get_constraintdef(pg_constraint.oid) AS consrc\n                   FROM pg_constraint) s\n          WHERE (s.consrc ~~* '%geometrytype(% = %'::text)) st ON (((st.connamespace = n.oid) AND (st.conrelid = c.oid) AND (a.attnum = ANY (st.conkey)))))\n     LEFT JOIN ( SELECT s.connamespace,\n            s.conrelid,\n            s.conkey,\n            (replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text))::integer AS ndims\n           FROM ( SELECT pg_constraint.connamespace,\n                    pg_constraint.conrelid,\n                    pg_constraint.conkey,\n                    pg_get_constraintdef(pg_constraint.oid) AS consrc\n                   FROM pg_constraint) s\n          WHERE (s.consrc ~~* '%ndims(% = %'::text)) sn ON (((sn.connamespace = n.oid) AND (sn.conrelid = c.oid) AND (a.attnum = ANY (sn.conkey)))))\n     LEFT JOIN ( SELECT s.connamespace,\n            s.conrelid,\n            s.conkey,\n            (replace(replace(split_part(s.consrc, ' = '::text, 2), ')'::text, ''::text), '('::text, ''::text))::integer AS srid\n           FROM ( SELECT pg_constraint.connamespace,\n                    pg_constraint.conrelid,\n                    pg_constraint.conkey,\n                    pg_get_constraintdef(pg_constraint.oid) AS consrc\n                   FROM pg_constraint) s\n          WHERE (s.consrc ~~* '%srid(% = %'::text)) sr ON (((sr.connamespace = n.oid) AND (sr.conrelid = c.oid) AND (a.attnum = ANY (sr.conkey)))))\n  WHERE ((c.relkind = ANY (ARRAY['r'::\"char\", 'v'::\"char\", 'm'::\"char\", 'f'::\"char\", 'p'::\"char\"])) AND (NOT (c.relname = 'raster_columns'::name)) AND (t.typname = 'geometry'::name) AND (NOT pg_is_other_temp_schema(c.relnamespace)) AND has_table_privilege(c.oid, 'SELECT'::text));"));
    }

    public <O extends Record> GeometryColumns(Table<O> child, ForeignKey<O, GeometryColumnsRecord> key) {
        super(child, key, GEOMETRY_COLUMNS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public GeometryColumns as(String alias) {
        return new GeometryColumns(DSL.name(alias), this);
    }

    @Override
    public GeometryColumns as(Name alias) {
        return new GeometryColumns(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GeometryColumns rename(String name) {
        return new GeometryColumns(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GeometryColumns rename(Name name) {
        return new GeometryColumns(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, String, String, String, Integer, Integer, String> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
