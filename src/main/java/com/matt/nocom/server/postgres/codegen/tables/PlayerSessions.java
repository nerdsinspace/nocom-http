/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.Indexes;
import com.matt.nocom.server.postgres.codegen.Keys;
import com.matt.nocom.server.postgres.codegen.tables.records.PlayerSessionsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.lambda.tuple.Range;
import space.nerdsin.nocom.server.jooq.Int8RangeJOOQBinding;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PlayerSessions extends TableImpl<PlayerSessionsRecord> {

    private static final long serialVersionUID = 636750965;

    /**
     * The reference instance of <code>player_sessions</code>
     */
    public static final PlayerSessions PLAYER_SESSIONS = new PlayerSessions();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PlayerSessionsRecord> getRecordType() {
        return PlayerSessionsRecord.class;
    }

    /**
     * The column <code>player_sessions.player_id</code>.
     */
    public final TableField<PlayerSessionsRecord, Integer> PLAYER_ID = createField(DSL.name("player_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>player_sessions.server_id</code>.
     */
    public final TableField<PlayerSessionsRecord, Short> SERVER_ID = createField(DSL.name("server_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>player_sessions.join</code>.
     */
    public final TableField<PlayerSessionsRecord, Long> JOIN = createField(DSL.name("join"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>player_sessions.leave</code>.
     */
    public final TableField<PlayerSessionsRecord, Long> LEAVE = createField(DSL.name("leave"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>player_sessions.range</code>.
     */
    public final TableField<PlayerSessionsRecord, Range<Long>> RANGE = createField(DSL.name("range"), org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"int8range\""), this, "", new Int8RangeJOOQBinding());

    /**
     * The column <code>player_sessions.legacy</code>.
     */
    public final TableField<PlayerSessionsRecord, Boolean> LEGACY = createField(DSL.name("legacy"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>player_sessions</code> table reference
     */
    public PlayerSessions() {
        this(DSL.name("player_sessions"), null);
    }

    /**
     * Create an aliased <code>player_sessions</code> table reference
     */
    public PlayerSessions(String alias) {
        this(DSL.name(alias), PLAYER_SESSIONS);
    }

    /**
     * Create an aliased <code>player_sessions</code> table reference
     */
    public PlayerSessions(Name alias) {
        this(alias, PLAYER_SESSIONS);
    }

    private PlayerSessions(Name alias, Table<PlayerSessionsRecord> aliased) {
        this(alias, aliased, null);
    }

    private PlayerSessions(Name alias, Table<PlayerSessionsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> PlayerSessions(Table<O> child, ForeignKey<O, PlayerSessionsRecord> key) {
        super(child, key, PLAYER_SESSIONS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PLAYER_SESSIONS_RANGE);
    }

    @Override
    public List<ForeignKey<PlayerSessionsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PlayerSessionsRecord, ?>>asList(Keys.PLAYER_SESSIONS__PLAYER_SESSIONS_PLAYER_ID_FKEY, Keys.PLAYER_SESSIONS__PLAYER_SESSIONS_SERVER_ID_FKEY);
    }

    public Players players() {
        return new Players(this, Keys.PLAYER_SESSIONS__PLAYER_SESSIONS_PLAYER_ID_FKEY);
    }

    public Servers servers() {
        return new Servers(this, Keys.PLAYER_SESSIONS__PLAYER_SESSIONS_SERVER_ID_FKEY);
    }

    @Override
    public PlayerSessions as(String alias) {
        return new PlayerSessions(DSL.name(alias), this);
    }

    @Override
    public PlayerSessions as(Name alias) {
        return new PlayerSessions(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerSessions rename(String name) {
        return new PlayerSessions(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PlayerSessions rename(Name name) {
        return new PlayerSessions(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Short, Long, Long, Range<Long>, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
