/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables.records;


import com.matt.nocom.server.postgres.codegen.tables.Dbscan;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record14;
import org.jooq.Row14;
import org.jooq.impl.UpdatableRecordImpl;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DbscanRecord extends UpdatableRecordImpl<DbscanRecord> implements Record14<Integer, Integer, Integer, Short, Short, Boolean, Boolean, Integer, Integer, Integer, Long, Object[], Long, Long> {

    private static final long serialVersionUID = 1748805649;

    /**
     * Setter for <code>dbscan.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>dbscan.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>dbscan.x</code>.
     */
    public void setX(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>dbscan.x</code>.
     */
    public Integer getX() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>dbscan.z</code>.
     */
    public void setZ(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>dbscan.z</code>.
     */
    public Integer getZ() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>dbscan.dimension</code>.
     */
    public void setDimension(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>dbscan.dimension</code>.
     */
    public Short getDimension() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>dbscan.server_id</code>.
     */
    public void setServerId(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>dbscan.server_id</code>.
     */
    public Short getServerId() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>dbscan.is_node</code>.
     */
    public void setIsNode(Boolean value) {
        set(5, value);
    }

    /**
     * Getter for <code>dbscan.is_node</code>.
     */
    public Boolean getIsNode() {
        return (Boolean) get(5);
    }

    /**
     * Setter for <code>dbscan.is_core</code>.
     */
    public void setIsCore(Boolean value) {
        set(6, value);
    }

    /**
     * Getter for <code>dbscan.is_core</code>.
     */
    public Boolean getIsCore() {
        return (Boolean) get(6);
    }

    /**
     * Setter for <code>dbscan.cluster_parent</code>.
     */
    public void setClusterParent(Integer value) {
        set(7, value);
    }

    /**
     * Getter for <code>dbscan.cluster_parent</code>.
     */
    public Integer getClusterParent() {
        return (Integer) get(7);
    }

    /**
     * Setter for <code>dbscan.disjoint_rank</code>.
     */
    public void setDisjointRank(Integer value) {
        set(8, value);
    }

    /**
     * Getter for <code>dbscan.disjoint_rank</code>.
     */
    public Integer getDisjointRank() {
        return (Integer) get(8);
    }

    /**
     * Setter for <code>dbscan.disjoint_size</code>.
     */
    public void setDisjointSize(Integer value) {
        set(9, value);
    }

    /**
     * Getter for <code>dbscan.disjoint_size</code>.
     */
    public Integer getDisjointSize() {
        return (Integer) get(9);
    }

    /**
     * Setter for <code>dbscan.root_updated_at</code>.
     */
    public void setRootUpdatedAt(Long value) {
        set(10, value);
    }

    /**
     * Getter for <code>dbscan.root_updated_at</code>.
     */
    public Long getRootUpdatedAt() {
        return (Long) get(10);
    }

    /**
     * Setter for <code>dbscan.ts_ranges</code>.
     */
    public void setTsRanges(Object... value) {
        set(11, value);
    }

    /**
     * Getter for <code>dbscan.ts_ranges</code>.
     */
    public Object[] getTsRanges() {
        return (Object[]) get(11);
    }

    /**
     * Setter for <code>dbscan.last_init_hit</code>.
     */
    public void setLastInitHit(Long value) {
        set(12, value);
    }

    /**
     * Getter for <code>dbscan.last_init_hit</code>.
     */
    public Long getLastInitHit() {
        return (Long) get(12);
    }

    /**
     * Setter for <code>dbscan.first_init_hit</code>.
     */
    public void setFirstInitHit(Long value) {
        set(13, value);
    }

    /**
     * Getter for <code>dbscan.first_init_hit</code>.
     */
    public Long getFirstInitHit() {
        return (Long) get(13);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record14 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row14<Integer, Integer, Integer, Short, Short, Boolean, Boolean, Integer, Integer, Integer, Long, Object[], Long, Long> fieldsRow() {
        return (Row14) super.fieldsRow();
    }

    @Override
    public Row14<Integer, Integer, Integer, Short, Short, Boolean, Boolean, Integer, Integer, Integer, Long, Object[], Long, Long> valuesRow() {
        return (Row14) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Dbscan.DBSCAN.ID;
    }

    @Override
    public Field<Integer> field2() {
        return Dbscan.DBSCAN.X;
    }

    @Override
    public Field<Integer> field3() {
        return Dbscan.DBSCAN.Z;
    }

    @Override
    public Field<Short> field4() {
        return Dbscan.DBSCAN.DIMENSION;
    }

    @Override
    public Field<Short> field5() {
        return Dbscan.DBSCAN.SERVER_ID;
    }

    @Override
    public Field<Boolean> field6() {
        return Dbscan.DBSCAN.IS_NODE;
    }

    @Override
    public Field<Boolean> field7() {
        return Dbscan.DBSCAN.IS_CORE;
    }

    @Override
    public Field<Integer> field8() {
        return Dbscan.DBSCAN.CLUSTER_PARENT;
    }

    @Override
    public Field<Integer> field9() {
        return Dbscan.DBSCAN.DISJOINT_RANK;
    }

    @Override
    public Field<Integer> field10() {
        return Dbscan.DBSCAN.DISJOINT_SIZE;
    }

    @Override
    public Field<Long> field11() {
        return Dbscan.DBSCAN.ROOT_UPDATED_AT;
    }

    @Override
    public Field<Object[]> field12() {
        return Dbscan.DBSCAN.TS_RANGES;
    }

    @Override
    public Field<Long> field13() {
        return Dbscan.DBSCAN.LAST_INIT_HIT;
    }

    @Override
    public Field<Long> field14() {
        return Dbscan.DBSCAN.FIRST_INIT_HIT;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer component2() {
        return getX();
    }

    @Override
    public Integer component3() {
        return getZ();
    }

    @Override
    public Short component4() {
        return getDimension();
    }

    @Override
    public Short component5() {
        return getServerId();
    }

    @Override
    public Boolean component6() {
        return getIsNode();
    }

    @Override
    public Boolean component7() {
        return getIsCore();
    }

    @Override
    public Integer component8() {
        return getClusterParent();
    }

    @Override
    public Integer component9() {
        return getDisjointRank();
    }

    @Override
    public Integer component10() {
        return getDisjointSize();
    }

    @Override
    public Long component11() {
        return getRootUpdatedAt();
    }

    @Override
    public Object[] component12() {
        return getTsRanges();
    }

    @Override
    public Long component13() {
        return getLastInitHit();
    }

    @Override
    public Long component14() {
        return getFirstInitHit();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer value2() {
        return getX();
    }

    @Override
    public Integer value3() {
        return getZ();
    }

    @Override
    public Short value4() {
        return getDimension();
    }

    @Override
    public Short value5() {
        return getServerId();
    }

    @Override
    public Boolean value6() {
        return getIsNode();
    }

    @Override
    public Boolean value7() {
        return getIsCore();
    }

    @Override
    public Integer value8() {
        return getClusterParent();
    }

    @Override
    public Integer value9() {
        return getDisjointRank();
    }

    @Override
    public Integer value10() {
        return getDisjointSize();
    }

    @Override
    public Long value11() {
        return getRootUpdatedAt();
    }

    @Override
    public Object[] value12() {
        return getTsRanges();
    }

    @Override
    public Long value13() {
        return getLastInitHit();
    }

    @Override
    public Long value14() {
        return getFirstInitHit();
    }

    @Override
    public DbscanRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public DbscanRecord value2(Integer value) {
        setX(value);
        return this;
    }

    @Override
    public DbscanRecord value3(Integer value) {
        setZ(value);
        return this;
    }

    @Override
    public DbscanRecord value4(Short value) {
        setDimension(value);
        return this;
    }

    @Override
    public DbscanRecord value5(Short value) {
        setServerId(value);
        return this;
    }

    @Override
    public DbscanRecord value6(Boolean value) {
        setIsNode(value);
        return this;
    }

    @Override
    public DbscanRecord value7(Boolean value) {
        setIsCore(value);
        return this;
    }

    @Override
    public DbscanRecord value8(Integer value) {
        setClusterParent(value);
        return this;
    }

    @Override
    public DbscanRecord value9(Integer value) {
        setDisjointRank(value);
        return this;
    }

    @Override
    public DbscanRecord value10(Integer value) {
        setDisjointSize(value);
        return this;
    }

    @Override
    public DbscanRecord value11(Long value) {
        setRootUpdatedAt(value);
        return this;
    }

    @Override
    public DbscanRecord value12(Object... value) {
        setTsRanges(value);
        return this;
    }

    @Override
    public DbscanRecord value13(Long value) {
        setLastInitHit(value);
        return this;
    }

    @Override
    public DbscanRecord value14(Long value) {
        setFirstInitHit(value);
        return this;
    }

    @Override
    public DbscanRecord values(Integer value1, Integer value2, Integer value3, Short value4, Short value5, Boolean value6, Boolean value7, Integer value8, Integer value9, Integer value10, Long value11, Object[] value12, Long value13, Long value14) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        value9(value9);
        value10(value10);
        value11(value11);
        value12(value12);
        value13(value13);
        value14(value14);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached DbscanRecord
     */
    public DbscanRecord() {
        super(Dbscan.DBSCAN);
    }

    /**
     * Create a detached, initialised DbscanRecord
     */
    public DbscanRecord(Integer id, Integer x, Integer z, Short dimension, Short serverId, Boolean isNode, Boolean isCore, Integer clusterParent, Integer disjointRank, Integer disjointSize, Long rootUpdatedAt, Object[] tsRanges, Long lastInitHit, Long firstInitHit) {
        super(Dbscan.DBSCAN);

        set(0, id);
        set(1, x);
        set(2, z);
        set(3, dimension);
        set(4, serverId);
        set(5, isNode);
        set(6, isCore);
        set(7, clusterParent);
        set(8, disjointRank);
        set(9, disjointSize);
        set(10, rootUpdatedAt);
        set(11, tsRanges);
        set(12, lastInitHit);
        set(13, firstInitHit);
    }
}
