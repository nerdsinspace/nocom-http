/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.Indexes;
import com.matt.nocom.server.postgres.codegen.Keys;
import com.matt.nocom.server.postgres.codegen.enums.StatusesEnum;
import com.matt.nocom.server.postgres.codegen.tables.records.StatusesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Statuses extends TableImpl<StatusesRecord> {

    private static final long serialVersionUID = -464503645;

    /**
     * The reference instance of <code>statuses</code>
     */
    public static final Statuses STATUSES = new Statuses();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StatusesRecord> getRecordType() {
        return StatusesRecord.class;
    }

    /**
     * The column <code>statuses.player_id</code>.
     */
    public final TableField<StatusesRecord, Integer> PLAYER_ID = createField(DSL.name("player_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>statuses.curr_status</code>.
     */
    public final TableField<StatusesRecord, StatusesEnum> CURR_STATUS = createField(DSL.name("curr_status"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(com.matt.nocom.server.postgres.codegen.enums.StatusesEnum.class), this, "");

    /**
     * The column <code>statuses.updated_at</code>.
     */
    public final TableField<StatusesRecord, Long> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>statuses.data</code>.
     */
    public final TableField<StatusesRecord, String> DATA = createField(DSL.name("data"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>statuses.server_id</code>.
     */
    public final TableField<StatusesRecord, Short> SERVER_ID = createField(DSL.name("server_id"), org.jooq.impl.SQLDataType.SMALLINT.nullable(false), this, "");

    /**
     * The column <code>statuses.dimension</code>.
     */
    public final TableField<StatusesRecord, Short> DIMENSION = createField(DSL.name("dimension"), org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * Create a <code>statuses</code> table reference
     */
    public Statuses() {
        this(DSL.name("statuses"), null);
    }

    /**
     * Create an aliased <code>statuses</code> table reference
     */
    public Statuses(String alias) {
        this(DSL.name(alias), STATUSES);
    }

    /**
     * Create an aliased <code>statuses</code> table reference
     */
    public Statuses(Name alias) {
        this(alias, STATUSES);
    }

    private Statuses(Name alias, Table<StatusesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Statuses(Name alias, Table<StatusesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Statuses(Table<O> child, ForeignKey<O, StatusesRecord> key) {
        super(child, key, STATUSES);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STATUSES_PLAYER_ID_SERVER_ID_KEY);
    }

    @Override
    public List<UniqueKey<StatusesRecord>> getKeys() {
        return Arrays.<UniqueKey<StatusesRecord>>asList(Keys.STATUSES_PLAYER_ID_SERVER_ID_KEY);
    }

    @Override
    public List<ForeignKey<StatusesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<StatusesRecord, ?>>asList(Keys.STATUSES__STATUSES_PLAYER_ID_FKEY, Keys.STATUSES__STATUSES_SERVER_ID_FKEY, Keys.STATUSES__STATUSES_DIMENSION_FKEY);
    }

    public Players players() {
        return new Players(this, Keys.STATUSES__STATUSES_PLAYER_ID_FKEY);
    }

    public Servers servers() {
        return new Servers(this, Keys.STATUSES__STATUSES_SERVER_ID_FKEY);
    }

    public Dimensions dimensions() {
        return new Dimensions(this, Keys.STATUSES__STATUSES_DIMENSION_FKEY);
    }

    @Override
    public Statuses as(String alias) {
        return new Statuses(DSL.name(alias), this);
    }

    @Override
    public Statuses as(Name alias) {
        return new Statuses(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Statuses rename(String name) {
        return new Statuses(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Statuses rename(Name name) {
        return new Statuses(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, StatusesEnum, Long, String, Short, Short> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
