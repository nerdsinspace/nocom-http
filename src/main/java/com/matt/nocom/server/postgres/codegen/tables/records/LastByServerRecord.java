/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables.records;


import com.matt.nocom.server.postgres.codegen.tables.LastByServer;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LastByServerRecord extends UpdatableRecordImpl<LastByServerRecord> implements Record2<Short, Long> {

    private static final long serialVersionUID = 724708626;

    /**
     * Setter for <code>last_by_server.server_id</code>.
     */
    public void setServerId(Short value) {
        set(0, value);
    }

    /**
     * Getter for <code>last_by_server.server_id</code>.
     */
    public Short getServerId() {
        return (Short) get(0);
    }

    /**
     * Setter for <code>last_by_server.created_at</code>.
     */
    public void setCreatedAt(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>last_by_server.created_at</code>.
     */
    public Long getCreatedAt() {
        return (Long) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Short> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Short, Long> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Short, Long> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Short> field1() {
        return LastByServer.LAST_BY_SERVER.SERVER_ID;
    }

    @Override
    public Field<Long> field2() {
        return LastByServer.LAST_BY_SERVER.CREATED_AT;
    }

    @Override
    public Short component1() {
        return getServerId();
    }

    @Override
    public Long component2() {
        return getCreatedAt();
    }

    @Override
    public Short value1() {
        return getServerId();
    }

    @Override
    public Long value2() {
        return getCreatedAt();
    }

    @Override
    public LastByServerRecord value1(Short value) {
        setServerId(value);
        return this;
    }

    @Override
    public LastByServerRecord value2(Long value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public LastByServerRecord values(Short value1, Long value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LastByServerRecord
     */
    public LastByServerRecord() {
        super(LastByServer.LAST_BY_SERVER);
    }

    /**
     * Create a detached, initialised LastByServerRecord
     */
    public LastByServerRecord(Short serverId, Long createdAt) {
        super(LastByServer.LAST_BY_SERVER);

        set(0, serverId);
        set(1, createdAt);
    }
}
