/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.tables.records.OldDbscanProgressRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.processing.Generated;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.12.3"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OldDbscanProgress extends TableImpl<OldDbscanProgressRecord> {

    private static final long serialVersionUID = 1448126391;

    /**
     * The reference instance of <code>old_dbscan_progress</code>
     */
    public static final OldDbscanProgress OLD_DBSCAN_PROGRESS = new OldDbscanProgress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OldDbscanProgressRecord> getRecordType() {
        return OldDbscanProgressRecord.class;
    }

    /**
     * The column <code>old_dbscan_progress.last_processed_hit_id</code>.
     */
    public final TableField<OldDbscanProgressRecord, Long> LAST_PROCESSED_HIT_ID = createField(DSL.name("last_processed_hit_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>old_dbscan_progress</code> table reference
     */
    public OldDbscanProgress() {
        this(DSL.name("old_dbscan_progress"), null);
    }

    /**
     * Create an aliased <code>old_dbscan_progress</code> table reference
     */
    public OldDbscanProgress(String alias) {
        this(DSL.name(alias), OLD_DBSCAN_PROGRESS);
    }

    /**
     * Create an aliased <code>old_dbscan_progress</code> table reference
     */
    public OldDbscanProgress(Name alias) {
        this(alias, OLD_DBSCAN_PROGRESS);
    }

    private OldDbscanProgress(Name alias, Table<OldDbscanProgressRecord> aliased) {
        this(alias, aliased, null);
    }

    private OldDbscanProgress(Name alias, Table<OldDbscanProgressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> OldDbscanProgress(Table<O> child, ForeignKey<O, OldDbscanProgressRecord> key) {
        super(child, key, OLD_DBSCAN_PROGRESS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public OldDbscanProgress as(String alias) {
        return new OldDbscanProgress(DSL.name(alias), this);
    }

    @Override
    public OldDbscanProgress as(Name alias) {
        return new OldDbscanProgress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OldDbscanProgress rename(String name) {
        return new OldDbscanProgress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OldDbscanProgress rename(Name name) {
        return new OldDbscanProgress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
