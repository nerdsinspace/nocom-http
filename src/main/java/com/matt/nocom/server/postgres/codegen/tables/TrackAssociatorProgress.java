/*
 * This file is generated by jOOQ.
 */
package com.matt.nocom.server.postgres.codegen.tables;


import com.matt.nocom.server.postgres.codegen.DefaultSchema;
import com.matt.nocom.server.postgres.codegen.tables.records.TrackAssociatorProgressRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TrackAssociatorProgress extends TableImpl<TrackAssociatorProgressRecord> {

    private static final long serialVersionUID = 1171611697;

    /**
     * The reference instance of <code>track_associator_progress</code>
     */
    public static final TrackAssociatorProgress TRACK_ASSOCIATOR_PROGRESS = new TrackAssociatorProgress();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TrackAssociatorProgressRecord> getRecordType() {
        return TrackAssociatorProgressRecord.class;
    }

    /**
     * The column <code>track_associator_progress.max_updated_at_processed</code>.
     */
    public final TableField<TrackAssociatorProgressRecord, Long> MAX_UPDATED_AT_PROCESSED = createField(DSL.name("max_updated_at_processed"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>track_associator_progress</code> table reference
     */
    public TrackAssociatorProgress() {
        this(DSL.name("track_associator_progress"), null);
    }

    /**
     * Create an aliased <code>track_associator_progress</code> table reference
     */
    public TrackAssociatorProgress(String alias) {
        this(DSL.name(alias), TRACK_ASSOCIATOR_PROGRESS);
    }

    /**
     * Create an aliased <code>track_associator_progress</code> table reference
     */
    public TrackAssociatorProgress(Name alias) {
        this(alias, TRACK_ASSOCIATOR_PROGRESS);
    }

    private TrackAssociatorProgress(Name alias, Table<TrackAssociatorProgressRecord> aliased) {
        this(alias, aliased, null);
    }

    private TrackAssociatorProgress(Name alias, Table<TrackAssociatorProgressRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TrackAssociatorProgress(Table<O> child, ForeignKey<O, TrackAssociatorProgressRecord> key) {
        super(child, key, TRACK_ASSOCIATOR_PROGRESS);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public TrackAssociatorProgress as(String alias) {
        return new TrackAssociatorProgress(DSL.name(alias), this);
    }

    @Override
    public TrackAssociatorProgress as(Name alias) {
        return new TrackAssociatorProgress(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackAssociatorProgress rename(String name) {
        return new TrackAssociatorProgress(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TrackAssociatorProgress rename(Name name) {
        return new TrackAssociatorProgress(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Long> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
